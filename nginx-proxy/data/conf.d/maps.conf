
# Basically put, map will create a new variable, and assign the 
# value of that variable based on the value of other variables. eg
# $new_variable = 1 if $existing_variable = true or
# $new_variable = 0 if $existing_variable = false.

# map $existing_variable $new_variable {
#     "true" 1;
#     "false" 0;
# }

# You can leverage this in conditional configuration by assigning a 
# configuration value to a new variable, and using that in your configuration. 
# For example, use a different whitelist depending on the source ip 
# address of the request:

# map $remote_addr $whitelist {
#     "192.168.100.1" "whitelist1.incl";
#     "192.168.100.2" "whitelist2.incl";
# }

# location / {
#   include $whitelist;
# }


# Use a different path value depending on 
# the value of the placeholder variable:

# map $placeholder $user_found_path {
#     'true'   '/login';
#     'false'  '/signup';
# }

# if $user_found_path = '/login' if $placeholder = true
# if $user_found_path = '/signup' if $placeholder = false.

################################################################################################

# Use a different whitelist depending on 
# the source ip address of the request:

# map $remote_addr $whitelist {
#     "192.168.100.1" "whitelist1.incl";
#     "192.168.100.2" "whitelist2.incl";
# }
 
# location / {
#    include $whitelist;
# }

################################################################################################

# In this instance
# 
# - we need 2 map blocks:
# One to test if the host name is “example.com”
# One to test if the source ip address is 192.168.100.1
# 
# - and 2 variables:
# One to hold the value of the home page file ($index_page)
# One to link the map conditions together ($map_link)
# 
# Test the host name, and assign the 
# home page filename value to the $map_link variable
# 
# map $host $map_link {
#     default "index.html";
#     "example.com" "index_new.html";
# }
# 
# Test the source address, and if it matches the relevant address, 
# interpolate the value assigned from the previous map
# 
# map $remote_addr $index_page {
#     default "index.html";
#     "192.168.100.1" "${map_link}";
# }
# 
# location / {
#     index $index_page;
# }
# 
# If the hostname is “example.com”, we should provisionally make the home page 
# file “index_new.html”. Otherwise, the home page file should be “index.html”.
# If the source ip address is 192.168.100.1, which is the second part of our 
# test, we should refer to the result of the first part of our test. Otherwise,
# we can ignore the first part of our test and use the default value “index.html”.

#################################################################################

# # $is_bot becomes 1 if at least one of $bot_req and $bot_ua was 1
# map $is_bot $is_human {
#   default 1;
#   ~1 0;
# }

# # $is_bot becomes 1 if at least one of $bot_req and $bot_ua was 1
# map $bot_req$bot_ua $is_bot {
#   default 0;
#   ~1 1;
# }

# # $bot_ua becomes "1" if User Agent contains any bot signatures
# map $http_user_agent $bot_ua {
#   default 0;
#   ~*(url|index|archive|spider|bot|crawl|\+http) 1;
#   '' 1;
# }

# # $bot_req becomes "1" if client requested one of the listed files
# map $request_uri $bot_req {
#   default 0;
#   /robots.txt 1;
#   /humans.txt 1;
# }

# # maps_anon_ips
# map $remote_addr $ip1 {
#   ~(?P<ip>\d+\.\d+\.\d+)\. $ip;
#   ~(?P<ip>[^:]+:[^:]+): $ip;
#   default 0.0.0;
# }

# # 
# map $remote_addr $ip2 {
#   default .0;
#   "~(?P<ip>(\d+)\.(\d+)\.(\d+))\.\d+" .0;
#   "~(?P<ip>[^:]+:[^:]+):" ::;
# }

# # 
# map $ip1$ip2 $remote_addr_anon {
#   default 0.0.0.0;
#   "~(?P<ip>.*)" $ip;
# }
